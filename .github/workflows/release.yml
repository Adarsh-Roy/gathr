name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write   # needed for gh-release uploads

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: gthr-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: gthr-x86_64-unknown-linux-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            name: gthr-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            name: gthr-aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: gthr-x86_64-pc-windows-msvc.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/gthr.exe "${{ matrix.name }}"
          else
            cp target/${{ matrix.target }}/release/gthr "${{ matrix.name }}"
          fi

      - name: Create tarball (Unix)
        if: matrix.os != 'windows-latest'
        run: tar -czf "${{ matrix.name }}.tar.gz" "${{ matrix.name }}"

      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        run: 7z a "${{ matrix.name }}.zip" "${{ matrix.name }}"

      - name: Upload Release Asset (Unix)
        uses: softprops/action-gh-release@v1
        if: matrix.os != 'windows-latest'
        with:
          files: ${{ matrix.name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (Windows)
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'windows-latest'
        with:
          files: ${{ matrix.name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew tap formula
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Compute SHAs from release assets
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"   # e.g., v0.1.0
          REPO="${{ github.repository }}" # e.g., Adarsh-Roy/gthr

          ARM64_URL="https://github.com/${REPO}/releases/download/${TAG}/gthr-aarch64-apple-darwin.tar.gz"
          X86_URL="https://github.com/${REPO}/releases/download/${TAG}/gthr-x86_64-apple-darwin.tar.gz"
          LINUX_URL="https://github.com/${REPO}/releases/download/${TAG}/gthr-x86_64-unknown-linux-gnu.tar.gz"

          curl -fL --retry 5 -o arm64.tar.gz "${ARM64_URL}"
          curl -fL --retry 5 -o x86.tar.gz    "${X86_URL}"
          curl -fL --retry 5 -o linux.tar.gz  "${LINUX_URL}"

          echo "ARM64_SHA=$(sha256sum arm64.tar.gz | cut -d' ' -f1)" >> "$GITHUB_ENV"
          echo "X86_SHA=$(sha256sum x86.tar.gz    | cut -d' ' -f1)" >> "$GITHUB_ENV"
          echo "LINUX_SHA=$(sha256sum linux.tar.gz| cut -d' ' -f1)" >> "$GITHUB_ENV"
          echo "TAG=${TAG}" >> "$GITHUB_ENV"

      - name: Clone tap repo
        run: |
          git clone --depth 1 "https://x-access-token:${{ secrets.TAP_PUSH_TOKEN }}@github.com/Adarsh-Roy/homebrew-gthr.git" tap

      - name: Update Formula/gthr.rb
        working-directory: tap
        shell: bash
        env:
          TAG: ${{ env.TAG }}
          ARM64_SHA: ${{ env.ARM64_SHA }}
          X86_SHA: ${{ env.X86_SHA }}
          LINUX_SHA: ${{ env.LINUX_SHA }}
        run: |
          version_without_v="${TAG#v}"
          mkdir -p Formula
          cat > Formula/gthr.rb <<EOF
class Gthr < Formula
  desc "A CLI tool for interactive directory text ingestion with fuzzy finder"
  homepage "https://github.com/Adarsh-Roy/gthr"
  version "${version_without_v}"
  license "MIT"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/Adarsh-Roy/gthr/releases/download/${TAG}/gthr-aarch64-apple-darwin.tar.gz"
      sha256 "${ARM64_SHA}"
    else
      url "https://github.com/Adarsh-Roy/gthr/releases/download/${TAG}/gthr-x86_64-apple-darwin.tar.gz"
      sha256 "${X86_SHA}"
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/Adarsh-Roy/gthr/releases/download/${TAG}/gthr-x86_64-unknown-linux-gnu.tar.gz"
      sha256 "${LINUX_SHA}"
    end
  end

  def install
    if OS.mac?
      if Hardware::CPU.arm?
        bin.install "gthr-aarch64-apple-darwin" => "gthr"
      else
        bin.install "gthr-x86_64-apple-darwin" => "gthr"
      end
    elsif OS.linux?
      bin.install "gthr-x86_64-unknown-linux-gnu" => "gthr"
    end
  end

  test do
    system "#{bin}/gthr", "--help"
  end
end
EOF

      - name: Commit & push
        working-directory: tap
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add Formula/gthr.rb
          git commit -m "Update gthr formula for ${TAG}" || echo "No changes"
          # Rebase in case someone touched the tap meanwhile
          git pull --rebase || true
          git push origin HEAD:main
