name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: gthr-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: gthr-x86_64-unknown-linux-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            name: gthr-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            name: gthr-aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: gthr-x86_64-pc-windows-msvc.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.target }}/release/gthr.exe" "${{ matrix.name }}"
          else
            cp "target/${{ matrix.target }}/release/gthr" "${{ matrix.name }}"
          fi

      - name: Create tarball (Unix)
        if: matrix.os != 'windows-latest'
        run: tar -czf "${{ matrix.name }}.tar.gz" "${{ matrix.name }}"

      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        run: 7z a "${{ matrix.name }}.zip" "${{ matrix.name }}"

      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.name }}.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.name }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew tap formula
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Wait for release assets to be available
        run: sleep 30
        
      - name: Compute SHAs from release assets
        shell: bash
        env:
          TAG: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          
          # URLs for the release assets
          ARM64_URL="https://github.com/${REPO}/releases/download/${TAG}/gthr-aarch64-apple-darwin.tar.gz"
          X86_URL="https://github.com/${REPO}/releases/download/${TAG}/gthr-x86_64-apple-darwin.tar.gz"
          LINUX_URL="https://github.com/${REPO}/releases/download/${TAG}/gthr-x86_64-unknown-linux-gnu.tar.gz"
          
          echo "Downloading ARM64 binary..."
          max_attempts=10
          for i in $(seq 1 $max_attempts); do
            if curl -fL --retry 5 --retry-delay 10 -o arm64.tar.gz "${ARM64_URL}"; then
              break
            fi
            echo "Attempt $i failed, waiting..."
            sleep 10
          done
          
          echo "Downloading X86 binary..."
          for i in $(seq 1 $max_attempts); do
            if curl -fL --retry 5 --retry-delay 10 -o x86.tar.gz "${X86_URL}"; then
              break
            fi
            echo "Attempt $i failed, waiting..."
            sleep 10
          done
          
          echo "Downloading Linux binary..."
          for i in $(seq 1 $max_attempts); do
            if curl -fL --retry 5 --retry-delay 10 -o linux.tar.gz "${LINUX_URL}"; then
              break
            fi
            echo "Attempt $i failed, waiting..."
            sleep 10
          done
          
          # Compute SHA256 checksums
          ARM64_SHA=$(sha256sum arm64.tar.gz | cut -d' ' -f1)
          X86_SHA=$(sha256sum x86.tar.gz | cut -d' ' -f1)
          LINUX_SHA=$(sha256sum linux.tar.gz | cut -d' ' -f1)
          
          # Export to environment
          echo "ARM64_SHA=${ARM64_SHA}" >> "$GITHUB_ENV"
          echo "X86_SHA=${X86_SHA}" >> "$GITHUB_ENV"
          echo "LINUX_SHA=${LINUX_SHA}" >> "$GITHUB_ENV"
          echo "TAG=${TAG}" >> "$GITHUB_ENV"
          
          echo "Computed SHAs:"
          echo "ARM64: ${ARM64_SHA}"
          echo "X86: ${X86_SHA}"
          echo "Linux: ${LINUX_SHA}"

      - name: Clone tap repo
        run: |
          git clone --depth 1 "https://x-access-token:${{ secrets.TAP_PUSH_TOKEN }}@github.com/Adarsh-Roy/homebrew-gthr.git" tap

      - name: Update Formula/gthr.rb
        working-directory: tap
        shell: bash
        run: |
          set -euo pipefail
          
          # Extract version without 'v' prefix
          version_without_v="${TAG#v}"
          
          # Ensure Formula directory exists
          mkdir -p Formula
          
          # Create the formula file with proper variable substitution
          cat > Formula/gthr.rb <<EOF
class Gthr < Formula
  desc "A CLI tool for interactive directory text ingestion with fuzzy finder"
  homepage "https://github.com/Adarsh-Roy/gthr"
  version "${version_without_v}"
  license "MIT"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/Adarsh-Roy/gthr/releases/download/${TAG}/gthr-aarch64-apple-darwin.tar.gz"
      sha256 "${ARM64_SHA}"
    else
      url "https://github.com/Adarsh-Roy/gthr/releases/download/${TAG}/gthr-x86_64-apple-darwin.tar.gz"
      sha256 "${X86_SHA}"
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/Adarsh-Roy/gthr/releases/download/${TAG}/gthr-x86_64-unknown-linux-gnu.tar.gz"
      sha256 "${LINUX_SHA}"
    end
  end

  def install
    if OS.mac?
      if Hardware::CPU.arm?
        bin.install "gthr-aarch64-apple-darwin" => "gthr"
      else
        bin.install "gthr-x86_64-apple-darwin" => "gthr"
      end
    elsif OS.linux?
      bin.install "gthr-x86_64-unknown-linux-gnu" => "gthr"
    end
  end

  test do
    system "#{bin}/gthr", "--help"
  end
end
EOF
          
          echo "Formula updated successfully"
          cat Formula/gthr.rb

      - name: Commit & push
        working-directory: tap
        run: |
          set -euo pipefail
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add Formula/gthr.rb
          
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "Update gthr formula to ${TAG}"
          
          # Pull with rebase to handle any concurrent changes
          git pull --rebase origin main || true
          
          # Push the changes
          git push origin HEAD:main
